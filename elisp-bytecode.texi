\input texinfo  @c -*-texinfo-*-
@c %**start of header

@c @include docstyle.texi

@setfilename elisp-bytecode

@dircategory Emacs lisp
@direntry
* Lisp Bytecode Instructions::  The Emacs Lisp Bytecode Manual.
@end direntry

@contents

@ifnottex
@node Top
@top Emacs Lisp Bytecode and LAP Manual
@end ifnottex

@menu
* Introduction to Elisp Bytecode and LAP::
* Emacs Lisp Bytecode Environment::
* ELisp Bytecode Instructions::  Description of all Emacs Lisp Bytecode Instructions
* Opcode Changes Between Emacs Releases::
* Opcode Table::                 Table of Bytecode Instruction ordered by Opcode Number
* References::
* Opcode Index::
* Instruction Index::
@end menu

@node Introduction to Elisp Bytecode and LAP
@chapter Introduction to Elisp Bytecode and LAP

@menu
* Why is ELisp Bytecode important and how is Emacs as a program different?::
* ELisp Bytecode and LAP::
* Emacs Lisp Virtual Machine::
* The Byte-code Function Literal::
@end menu

@node Why is ELisp Bytecode important and how is Emacs as a program different?
@section Why is ELisp Bytecode important and how is Emacs as a program different?

If you were to look at two comparable complex programs circa 2018,
Firefox 53.0.3 and Emacs 25.3, you would see that relative sizes of Firefox
tarball is 5 times bigger than for Emacs. But how are these made up,
or what languages are they comprised of?

For Firefox whose core is written in C++ we have:

@verbatim
$ cloc --match-f='\.(js|c|cpp|html|py|css)$' firefox-53.0.3
   89156 text files.
   86240 unique files.
    1512 files ignored.

cloc v 1.60  T=244.20 s (353.2 files/s, 56012.8 lines/s)
-------------------------------------------------------------
Language                     files     comment           code
-------------------------------------------------------------
C++                           7267      418019        3057110
Javascript                   25855      532629        2859451
HTML                         45311      120520        2209067
C                             3482      400594        1664666
@end verbatim

And for Emacs whose core is written in C we have:

@verbatim
$ cloc emacs-25.3.tar.xz
    3346 text files.
    3251 unique files.
    1130 files ignored.

cloc 1.60  T=13.85 s (160.1 files/s, 154670.7 lines/s)
-------------------------------------------------------------------
Language                      files     comment           code
--------------------------------------------------------------
Lisp                           1616      200820        1270511
C                               255       66169         256314
C/C++ Header                    176       11505          34891
@end verbatim

If you look at the relative ratio of C++ versus Javascript code in
Firefox, and the ratio of C versus Lisp code in Emacs, you'll see that
there is much more of Emacs written in Lisp than say of Firefox
written in Javascript. (And if you look at the C code for Emacs, a lot
of it looks like Lisp written using C syntax). My take is that Emacs a
lot more orthogonal in its basic concepts and construction. Just as
Leibniz was amazed that such diversity could come out of such simple
rules of mathematics and physics, so it is remarkable that something
as complex as Emacs can come out of the relatively simple language
Lisp.

@node ELisp Bytecode and LAP
@section ELisp Bytecode and LAP

However pervasively used, Emacs Lisp (Elisp) is in making up the Emacs
ecosystem, ELisp is not and never has been a speedy language compared
to say, C, C++, Go, Rust, or Java. And that's where LAP and bytecode
come in.

As stated in a commment in @code{byte-opt.el} added circa 1996:
@quotation
No matter how hard you try, you can't make a racehorse out of a pig.

You can, however, make a faster pig.
@author Eric Naggum
@end quotation

ELisp bytecode is the custom lower-level language used by Emacs'
bytecode interpreter. As with all bytecode, bytecode instructions are
compact. For display purposes, there is a @code{disassemble} command
that unpacks the fields of the instruction. With this and using the
constants vector, bytecode can be printed in an assembly-language-like
format.

I'll often use Elisp bytecode instruction refer to an assembly
representation of an Elisp bytecode instruction.

LAP stands for Lisp Assembly Program. It seems to be an internal
representation of bytecode in a more symbolic form. It is used behind
the scenes to that make bytecode more amenable to optimization, since
the instructions are in a structure which is easier to operate on.

@uref{https://www.gnu.org/software/emacs/manual/html_node/elisp/Speed-of-Byte_002dCode.html,
Silly Loop Example} in the Emacs Lisp Manual gives a program to time
running in some code Bytecode interpreter versus running the code in the
Lisp interpreter. When I ran this program, bytecode ran 2.5 times
faster. The Emacs Lisp manual gets a speed improvement of about 3
times.

@node Emacs Lisp Virtual Machine
@section Emacs Lisp Virtual Machine

The Emacs Lisp bytecode interpreter, like many bytecode interpreters
such as Smalltalk, C Python, Forth, or PostScript, has an evaluation
stack and a code stack.  Emacs Lisp Bytecode uses Reverse Polish
Notation which is how many other bytecode interpreters work. It is the
opposite of the way Lisp works. In Lisp, the operator or function
comes first and the operands for the function come last. Thus, to add
the values of two variables we might write @code{(+ a b)}. However in
bytecode it is the other way around: the operator or function comes
last. So the corresponding bytecode is:

@verbatim
0	varref	  a
1	varref	  b
2	plus
@end verbatim

As in most language-specific virtual machines, but in contrast to a
typical a number of general-purpose virtual machines, the things that
are on the evaluation stack are the same objects as found in the
system that they model. Here, these objects can include Emacs buffers,
or font faces, Lisp objects like hashes or vectors, or simply (30-bit)
Lisp integers. Compare this with say LLVM IR, or JVM instructions
where the underlying objects on the stack are registers which can act
as pointers and the internal memory layout of objects is exposed.

Control flow in Lisp bytecode is similar to a conventional assembly
language: there are unconditional and conditional jumps. More complex
control structures are simply built out of this.

Although it may be obvious, one last thing I'd like to point out is
that the Elisp bytecode instruction set is custom to Emacs.  In
addition to primitives that you'd expect for Lisp like ``car'' and
``cdr'', there are primitive bytecodes for more complex Emacs
editor-specific concepts like ``save-excursion''@footnote{The fact that
the semantic level difference between Emacs Lisp and its bytecode is
not great makes writing a decompiler for it more feasible than if the
bytecode language were of a general nature such as say LLVM IR.}.

The interpreter is largely backwards compatible, but not forwards
compatible@footnote{well, eventually old Elisp bytecode instructions
@emph{do} die}. So old versions of Emacs can't run new
byte-code. Each instruction is between 1 and 3 bytes. The first byte
is the opcode and the second and third bytes are either a single
operand or a single intermediate value. Some operands are packed into
the opcode byte.


@node The Byte-code Function Literal
@section The Byte-code Function Literal

@emph{This section is largely lifted from Chris Wellon's Emacs
Byte-code Internals.  See references at the end of this doc.}

A byte-code object is functionally equivalent to a normal Elisp vector
except that it can be evaluated as a function. Elements are accessed
in constant time, the syntax is similar to vector syntax
(@verb{|[...]|} vs. @verb{|#[...]|}), and it can be of any length,
though valid functions must have 4 to 6 elements where the elements
have a particular structure elaborated on below.

There are two ways to create a byte-code object: using a byte-code
object literal or with @code{make-byte-code}. Like vector literals,
byte-code functions don't need to be quoted.

Examples of calling @code{make-byte-code}:
@verbatim
(make-byte-code 0 "" [] 0)
;; => #[0 "" [] 0]

#[1 2 3 4]
;; => #[1 2 3 4]

(#[0 "" [] 0])
;; error: Invalid byte opcode
@end verbatim

The elements of a bytecode function literal are:
@iftex
@enumerate
@item Function parameter (lambda) list
@item Byte-code Unibyte String
@item Constants Vector
@item Maximum Stack Usage
@item Docstring
@item Interactive Specification
@end enumerate
@end iftex
@menu
* Function parameter (lambda) list::
* Byte-code Unibyte String::
* Constants Vector::
* Maximum Stack Usage::
* Docstring::
* Interactive Specification::
@end menu

@node Function parameter (lambda) list
@unnumberedsubsec Function Parameter List

The first element of a bytecode-function literal is the parameter list
for the @code{defun}. The object takes on two different forms
depending on whether the function is lexically or dynamically scoped. If
the function is dynamically scoped, the argument list is exactly what
appears in Lisp code.

@subsubsection Example showing how a parameter list is transformed:
@verbatim
(byte-compile (lambda (a b &optional c)))
;; => #[(a b &optional c) "\300\207" [nil] 1]
@end verbatim

There's really no shorter way to represent the parameter list because
preserving the argument names is critical. Remember that, in dynamic
scope, while the function body is being evaluated these variables are
globally bound (eww!) to the function's arguments.

On the other hand, when the function is lexically scoped, the
parameter list is packed into an Elisp integer, indicating the counts
of the different kinds of parameters: required, @verb{|&optional|},
and @verb{|&rest|}. No variable names are needed.

The following shows how parameter counts and flags are encoded:

@image{elisp-params-small,,,,.png}

The least significant 7 bits indicate the number of required
arguments. Notice that this limits compiled, lexically-scoped
functions to 127 required arguments. The 8th bit is the number of
&rest arguments (up to 1). The remaining bits indicate the total
number of optional and required arguments (not counting &rest). It's
really easy to parse these in your head when viewed as hexadecimal
because each portion almost always fits inside its own ``digit.''

@subsubsection Example showing how lexical parameters are encoded:
@verbatim
(byte-compile-make-args-desc '())
;; => #x000  (0 args, 0 rest, 0 required)

(byte-compile-make-args-desc '(a b))
;; => #x202  (2 args, 0 rest, 2 required)

(byte-compile-make-args-desc '(a b &optional c))
;; => #x302  (3 args, 0 rest, 2 required)

(byte-compile-make-args-desc '(a b &optional c &rest d))
;; => #x382  (3 args, 1 rest, 2 required)
@end verbatim

The names of the arguments don't matter in lexical scope: they're
purely positional. This tighter argument specification is one of the
reasons lexical scope is faster: the byte-code interpreter doesn't
need to parse the entire lambda list and assign all of the variables
on each function invocation; furthermore, variable access is via a
compact index located usually in the operand value rather than an
index into the constants vector followed by a lookup of the variable.

@node Byte-code Unibyte String
@unnumberedsubsec Byte-code Unibyte String

The second element of a bytecode-function literal is a unibyte string
--- it strictly holds octets and is not to be interpreted as any sort
of Unicode encoding. These strings should be created with
unibyte-string because string may return a multibyte string. To
disambiguate the string type to the lisp reader when higher values are
present (> 127), the strings are printed in an escaped octal notation,
keeping the string literal inside the ASCII character set.

@subsubsection Example of a unibyte string:
@verbatim
(unibyte-string 100 200 250)
;; => "d\310\372"
@end verbatim

It's unusual to see a byte-code string that doesn't end with 135
(#o207, return). Perhaps this should have been implicit? I'll talk
more about the byte-code below.

@node Constants Vector
@unnumberedsubsec Constants Vector

The third object in a bytecode-function literal is a ``constants''
vector; it lists all of the symbols and constants used the function
and referred to in its instructions.

Byte-code has a limited number of kinds of operand. Most operands are
only a few bits in length, some fill an entire byte, and occasionally
an operand can be two bytes in length. Generally you can't have an
arbitrary symbol or structured constant listed directly inside an
operand. So instead, operands reference either the constants vector or
they index into the stack itself. Given this, the constants vector is
pretty hefty.

It's a normal Elisp vector and can be created with vector or a vector
literal.

@subsubsection showing a constants vector:
@verbatim
ELISP> (byte-compile (lambda (a b) (my-func '("hi" "there") a nil 5)))
#[(a b)
  "\301\302\303\304$\207"
  [a my-func
     ("hi" "there")
     nil 5]
  5]
@end verbatim

The constants vector in the above example contains 5 elements:
@itemize
@item @code{a} --- the variable symbol ``a''; note that ``b'' is not listed
@item @code{myfunc} the external function symbol ``myfunc''
@item @code{("hi" "there")} a list constant containing two strings
@item @code{nil} the nil constant
@item @code{5} the integer constant 5
@end itemize

If this were a lexically-scoped function, the constants vector wouldn't
have the variable symbol ``a'' listed.

@node Maximum Stack Usage
@unnumberedsubsec Maximum Stack Usage

The fourth object in a bytecode-function literal is an integer which gives
the maximum stack space used by this byte-code. This value can be
derived from the byte-code itself, but it's pre-computed so that the
byte-code interpreter can quickly check for stack
overflow. Under-reporting this value is probably another way to crash
Emacs.

@node Docstring
@unnumberedsubsec Docstring

The fifth object in a bytecode-function literal is simple and completely
optional: it's either the docstring itself, or if the docstring is
especially large it's a cons cell indicating a compiled `.elc` and a
position for lazy access. Only one position, the start, is needed
because the lisp reader is used to load it and it knows how to
recognize the end.

@node Interactive Specification
@unnumberedsubsec ``Interactive'' Specification

The last object in a bytecode-function literal is, like the docstring,
optional. If it is present and non-nil then the function is an
``interactive'' function. It holds the exactly contents of the
argument to @code{interactive} in the uncompiled function definition.

@subsubsection Examples showing the interactive specification:
@verbatim
(byte-compile (lambda (n) (interactive "nNumber: ") n))
;; => #[(n) "\010\207" [n] 1 nil "nNumber: "]

(byte-compile (lambda (n) (interactive (list (read))) n))
;; => #[(n) "\010\207" [n] 1 nil (list (read))]
@end verbatim

The interactive expression is always interpreted, and never
byte-compiled. This is usually fine because, by definition, this code
is going to be waiting on user input. However, it slows down keyboard
macro playback.

@node Emacs Lisp Bytecode Environment
@chapter Emacs Lisp Bytecode Environment

@menu
* Emacs Lisp Bytecode Objects::
* Emacs Lisp Bytecode Compiler::
* Emacs Lisp Bytecode Interpreter::
* Emacs Lisp Bytecode Instructions::
@end menu

@node Emacs Lisp Bytecode Objects
@section Emacs Lisp Bytecode Objects

Emacs Lisp bytecode isn't actually just a string of octets (bytes):
instead, it comes in the form of bytecode objects, which contain a
string of bytes as well as a constants vector, the pre-calculated
maximum stack depth, a docstring, and potentially other parts.

The constants vector is required to make sense of most bytecode:
functions that share the same bytecode byte string, but differ in
their constants vectors, can do very different things.

@node Emacs Lisp Bytecode Compiler
@section Emacs Lisp Bytecode Compiler

The Emacs Lisp Bytecode compiler is an ahead-of-time compiler that
accepts Emacs Lisp input and produces bytecode that can be run by
Emacs. The compiler itself is written in Emacs Lisp @footnote{usually,
the compiler itself is compiled into bytecode, which avoids overflow
problems}, and is a comparatively compact program contained in the
files bytecomp.el and byte-opt.el.

Internally, the compiler first produces an intermediate Lisp structure
in LAP code, then performs various optimizations on that, and finally
translates the LAP code into bytecode. LAP code is used during
compilation, but not kept in memory or used when running bytecode.
While it is possible to go back to LAP code from bytecode, this is
done only in order to inline functions.

@node Emacs Lisp Bytecode Interpreter
@section Emacs Lisp Bytecode Interpreter

When a function is called for which compiled bytecode is available,
control passes to the bytecode interpreter.  The interpreter is
written in C and heavily optimized for speed rather than readability.

The bytecode interpreter operates on a single function at a time; for
a function call, the bytecode interpreter calls other parts of Emacs,
which might call the bytecode interpreter again, recursively. Thus, in
contrast to languages like FORTH, there is no code stack per se, just
the C stack.

The bytecode interpreter implements a stack machine utilizing a
fixed-size evaluation stack, which is usually allocated as a block on
the C stack. Instructions can access either this stack or a constants
vector, which is produced at compile time and made part of the
bytecode object.

The evaluation stack, as well as the constants vector, contains Lisp
values, usually 64-bit words containing an integer (Emacs integers are
limited to 62 bits on 64-bit machines), symbol index, or a tagged
pointer to one of various Emacs structures such as markers, buffers,
floating-point numbers, vectors, or cons cells.

Values on the evaluation stack are created at run time; values in the
constants vector are created when the byte-compiled file is read and
converted into bytecode objects. The underlying bit representation of
values in the constants vector can vary between Emacs instances: they
are constants in the sense that they do not vary within a single Emacs
instance.

Bytecode objects contain a number safely estimating the maximum stack
size the evaluation stack can grow to.

@node Emacs Lisp Bytecode Instructions
@section Emacs Lisp Bytecode Instructions

The bytecode interpreter, once it has set up the evaluation stack and
constants vector, executes the instructions that make up the bytecode
byte string: each instruction is between one and three bytes in
length, containing an opcode in the first byte and sometimes an eight-
or 16-bit integer in the following bytes. Those integers are usually
unsigned, and 16-bit integers are stored in little-endian byte order,
regardless of whether that is the natural byte order for the machine
Emacs runs on.

Some opcodes, allocated in blocks, encode an integer as part of the
opcode byte.

Bytecode instructions operate on the evaluation stack: for example,
@code{plus}, the addition function, removes two values from the
top of the stack and pushes a single value, the sum of the first two
values, back on the stack.

Since the arguments for a function call need to be on the stack before
the function can operate on them, bytecode instructions use Reverse
Polish Notation: first the arguments are pushed on the stack, then the
function or operation is called.  For example, the Lisp expression
@code{(+ a b)} turns into this bytecode:

@c @code{(defun plus (a b) (+ a b))} generates
@verbatim
PC  Byte  Instruction
 0    8   varref a
 1    9   varref b
 2   92   plus
@end verbatim

First @code{a} and @code{b} are dereferenced and their values pushed
onto the evaluation stack; then @code{plus} is executed, leaving
only a single value, the sum of @code{a} and @code{b}, on the stack.

@node ELisp Bytecode Instructions
@chapter ELisp Bytecode Instructions

@menu
* Argument-Packing Instructions::
* Constants-Vector Retrieval Instructions::
* Return Instruction::
* Function-Call Instructions::
* Stack Manipulation Instructions::
* Binding Instructions::
@end menu

@node Argument-Packing Instructions
@section Argument-Packing Instructions

These instructions from opcode 1 to 47 encode an operand value from 0
to 7 as part of the opcode.  If the encoded value is 6, the actual
operand value is the byte following the opcode.  If the encoded value
is 7, the actual operand value is the two-byte number following the
opcode, in little-endian byte order.

@menu
* stack-ref::
* varref::
* varset::
* varbind::
* call::
* unbind::
@end menu

@node stack-ref
@unnumberedsubsec @code{stack-ref} (1--7)
@vindex stack-ref
@kindex 1, (0001) stack-ref[1]
@kindex 2, (0002) stack-ref[2]
@kindex 3, (0003) stack-ref[3]
@kindex 4, (0004) stack-ref[4]
@kindex 5, (0005) stack-ref[5]
@kindex 6, (0006) stack-ref[6]
@kindex 7, (0007) stack-ref[7]

A stack reference. This is used only in lexical binding.

Added in Emacs 24.1

@vindex stack-ref, 0 opcode
@subsubsection Warning
Running an instruction with opcode 0 (logically this would be called
@code{stack-ref[0]}), will cause an immediate abort of Emacs!

0 is typically an invalid bytecode and assembly instructions because 0
values are commonly found data, e.g. the end of C strings, or data that has
been initialized to value but represents data that hasn't been written to yet.

By doing this we typically catch running random or invalid bytecode.

@subsubsection Example
When lexical binding is in effect, @code{(defun stack-ref-eg() (let ((a 5) (b 6) (c 7)) (+ a c)))} generates:
@verbatim
PC  Byte  Instruction
 0  192   constant[0] 5
 1  193   constant[1] 6
 2  194   constant[2] 7
 3    2   stack-ref[2]
 4    1   stack-ref[1]
 5   92   plus
 6  178   stack-set [3]
           3
 8  136   discard
 9  136   discard
10  135   return

Constants Vector: [5 6 7]
@end verbatim

@node varref
@vindex varref
@kindex 8, (0010) varref[0]
@kindex 9, (0011) varref[1]
@kindex 10, (0012) varref[2]
@kindex 11, (0013) varref[3]
@kindex 12, (0014) varref[4]
@kindex 13, (0015) varref[5]
@kindex 14, (0016) varref[6]
@unnumberedsubsec @code{varref} (8--15)

Pushes the value of a variable reference onto the evaluation stack.

@subsubsection Example

When dynamic binding is in effect, @code{(defun varref-eg(n) n)} generates:
@verbatim
PC  Byte  Instruction
 0    8   varref[0] n
 1  135   return

Constants Vector: [n]
@end verbatim

@node varset
@vindex varset
@kindex 16, (0020) varset[0]
@kindex 17, (0021) varset[1]
@kindex 18, (0022) varset[2]
@kindex 19, (0023) varset[3]
@kindex 20, (0024) varset[4]
@kindex 21, (0025) varset[5]
@kindex 22, (0026) varset[6]
@kindex 23, (0027) varset[7]
@unnumberedsubsec @code{varset} (16--23)

Sets a variable given in the operand to the value that is on the top
of the stack.

@subsubsection Example

When dynamic binding is in effect, @code{(defun varset-eg(n) (setq n 5))} generates:
@verbatim
PC  Byte  Instruction
 0  193   constant[1] 5
 1  137   dup
 2   16   varset[0] n ;; sets variable n
 3  135   return

Constants Vector: [n 5]
@end verbatim

@node varbind
@vindex varbind
@kindex 24, (0030) varbind[0]
@kindex 25, (0031) varbind[1]
@kindex 26, (0032) varbind[2]
@kindex 27, (0033) varbind[3]
@kindex 28, (0034) varbind[4]
@kindex 29, (0035) varbind[5]
@kindex 30, (0036) varbind[6]
@kindex 31, (0037) varbind[7]
@unnumberedsubsec @code{varbind} (24--31)

Binds a variable

@node call
@vindex call
@kindex 32, (0040) call[0]
@kindex 33, (0041) call[1]
@kindex 34, (0042) call[2]
@kindex 35, (0043) call[3]
@kindex 36, (0044) call[4]
@kindex 37, (0045) call[5]
@kindex 38, (0046) call[6]
@kindex 39, (0047) call[7]
@unnumberedsubsec @code{call} (32--39)

Calls a function.  The opcode argument specifies the number of
arguments to pass to the function from the stack, excluding the
function itself.

@subsubsection Example

@code{(exchange-point-and-mark)} generates:
@verbatim
PC  Byte  Instruction
 0  192   constant[0] exchange-point-and-mark
 1   32   call[0]
 2  135   return

Constants Vector: [exchange-point-and-mark]
@end verbatim

@node unbind
@vindex unbind
@kindex 40, (0050) unbind[0]
@kindex 41, (0051) unbind[1]
@kindex 42, (0052) unbind[2]
@kindex 45, (0053) unbind[3]
@kindex 44, (0054) unbind[4]
@kindex 45, (0055) unbind[5]
@kindex 46, (0056) unbind[6]
@kindex 49, (0057) unbind[7]
@unnumberedsubsec @code{unbind} (40--47)

Unbinds special bindings

@node Constants-Vector Retrieval Instructions
@section Constants-Vector Retrieval Instructions

The instructions from opcode 192 to 255 push a value from the
Constants Vector. @xref{Constants Vector}. Opcode 192 pushes the first
entry, opcode 193, the second and so on. If there are more than 64
constants, opcode @code{constant2} (opcode 129) is used instead.

@menu
* constant::
* constant2::
@end menu

@node constant
@vindex constant
@unnumberedsubsec @code{constant} (192--255)

Pushes a value from the constants vector on the evaluation stack.
There are special instructions to push any one of the first
64 entries in the constants stack.

@subsubsection Example
@code{(defun constants-eg(n) (+ n 10 11 12))} generates:
@verbatim
PC  Byte  Instruction
 0  193   constant[1] +
 1    8   varref[0] n
 2  194   constant[2] 10
 3  195   constant[3] 11
 4  196   constant[4] 12
 5   36   call[4]
 6  135   return

Constants Vector: [n + 10 11 12]
@end verbatim

@node constant2
@vindex constant2
@kindex 129, (0201) constant2
@unnumberedsubsec @code{constant2} (129)

Pushes a value from the constants vector on the evaluation stack.
Although there are special instructions to push any one of the first
64 entries in the constants stack, this instruction is needed to push
a value beyond one the first 64 entries.

@c @code{(defun n64 (n) (+ n 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64))} generates

@code{(defun constant2-eg(n) (+ n 0 1 2 3 .. 64 ))} generates
@verbatim
PC  Byte  Instruction
 0  193   constant[1] +
 1    8   varref[0] n
 2  194   constant[2] 0
 3  195   constant[3] 1
 4  196   constant[4] 2
[...]
63  255   constant[63] 61
64  129   constant2 [64] 62
          64
           0
67  129   constant2 [65] 63
          65
           0
70  129   constant2 [66] 64
          66
           0
73   38   call [66]
          66
75  135   return

Constants Vector: [n + 0 1 2 .. 61 62 63 64]
@end verbatim

@node Return Instruction
@section Return Instruction

@vindex return
@kindex 135, (0207) return
@unnumberedsubsec @code{return} (135)
Return from function.  This is the last instruction in a function's
bytecode sequence. The top value on the evaluation stack is the return value.

@subsubsection Example
@code{(defun return-eg(n) 1)} generates:
@verbatim
PC  Byte  Instruction
 0  192   constant[0] 1
 1  135   return

Constants Vector: [1]
@end verbatim

@node Function-Call Instructions
@section Function-Call Instructions

These instructions use up one byte, and are followed by the next
instruction directly.  They are equivalent to calling an Emacs Lisp
function with a fixed number of arguments: the arguments are popped
from the stack, and a single return value is pushed back onto the
stack.

@menu
* Lisp Function Instructions::
* List Function Instructions::
* Arithmetic Function Instructions::
* String Function Instructions::
* Emacs Function Instructions::
@end menu

@node Lisp Function Instructions
@subsection Lisp Function Instructions

These instructions correspond to general functions which are not
specific to Emacs; common cases are usually inlined for speed by the
bytecode interpreter.

@menu
* symbolp::
* consp::
* stringp::
* listp::
* eq::
* memq::
* not::
* symbol-value::
* symbol-function::
* set::
* fset::
* get::
* equal::
* member::
* assq::
* numberp::
* integerp::
@end menu

@node symbolp
@vindex symbolp
@kindex 57, (0071) symbolp
@unnumberedsubsubsec @code{symbolp} (57)
Call @code{symbolp} with one argument.

@node consp
@vindex consp
@kindex 58, (0072) consp
@unnumberedsubsubsec @code{consp} (58)
Call @code{consp} with one argument.

@node stringp
@vindex stringp
@kindex 59, (0073) srtingp
@unnumberedsubsubsec @code{stringp} (59)
Call @code{stringp} with one argument.

@node listp
@vindex listp
@kindex 60, (0074) listp
@unnumberedsubsubsec @code{listp} (60)
Call @code{listp} with one argument.

@node eq
@vindex eq
@kindex 61, (0075) eq
@unnumberedsubsubsec @code{eq} (61)
Call @code{eq} with two arguments.

@node memq
@vindex memq
@kindex 62, (0076) memq
@unnumberedsubsubsec @code{memq} (62)
Call @code{memq} with two arguments.

@node not
@vindex not
@kindex 63, (0077) not
@unnumberedsubsubsec @code{not} (63)
Call @code{not} with one argument.

@node symbol-value
@vindex symbol-value
@kindex 64, (0112) symbol-value
@unnumberedsubsubsec @code{symbol-value} (74)
Call @code{symbol-value} with one argument.

@node symbol-function
@vindex symbol-function
@kindex 75, (0113) symbol-function
@unnumberedsubsubsec @code{symbol-function} (75)
Call @code{symbol-function} with one argument.

@node set
@vindex set
@unnumberedsubsubsec @code{set} (76)
Call @code{set} with two arguments.

@node fset
@vindex fset
@unnumberedsubsubsec @code{fset} (77)
Call @code{fset} with two arguments.

@node get
@vindex get
@unnumberedsubsubsec @code{get} (78)
Call @code{get} with two arguments.

@node equal
@vindex equal
@unnumberedsubsubsec @code{equal} (154)
Call @code{equal} with two arguments.

Added in Emacs 19.34.

@node member
@vindex member
@unnumberedsubsubsec @code{member} (157)
Call @code{member} with two arguments.

@node assq
@vindex assq
@unnumberedsubsubsec @code{assq} (158)
Call @code{assq} with two arguments.

@node numberp
@unnumberedsubsubsec @code{numberp} (167)
@vindex numberp
Call @code{numberp} with one argument.

Added in Emacs 19.34.

@node integerp
@unnumberedsubsubsec @code{integerp} (168)
@vindex integerp
Call @code{integerp} with one argument.

Added in Emacs 19.34.

@node List Function Instructions
@subsection List Function Instructions

These instructions correspond to general functions which are not
specific to Emacs; common cases are usually inlined for speed by the
bytecode interpreter.

@menu
* nth::
* car::
* cdr::
* cons::
* list1::
* list2::
* list3::
* list4::
* listN::
* length::
* aref::
* aset::
* nthcdr::
* elt::
* nreverse::
* setcar::
* setcdr::
* car-safe::
* cdr-safe::
* nconc::
@end menu

@node nth
@unnumberedsubsubsec @code{nth} (56)
@vindex nth
Call @code{nth} with two arguments.

@node car
@unnumberedsubsubsec @code{car} (64)
@vindex car
Call @code{car} with one argument.

@node cdr
@unnumberedsubsubsec @code{cdr} (65)
@vindex cdr
Call @code{cdr} with one argument.

@node cons
@unnumberedsubsubsec @code{cons} (66)
@vindex cons
Call @code{cons} with two arguments.

@node list1
@unnumberedsubsubsec @code{list1} (67)
@vindex list1
Call @code{list} with one argument.

@node list2
@unnumberedsubsubsec @code{list2} (68)
@vindex list2
Call @code{list} with two arguments.

@node list3
@unnumberedsubsubsec @code{list3} (69)
@vindex list3
Call @code{list} with three arguments.

@node list4
@unnumberedsubsubsec @code{list4} (70)
@vindex list4
Call @code{list} with four arguments.

@node listN
@unnumberedsubsubsec @code{list4} (70)
@vindex listN
Call @code{list} an arbitrary number of arguments.

oNote special instructions for the case where tehre are 2 to 4 items in
the list.

Added in Emacs 19.34.

@node length
@unnumberedsubsubsec @code{length} (71)
@vindex length
Call @code{length} with one argument.

@node aref
@unnumberedsubsubsec @code{aref} (72)
@vindex aref
Call @code{aref} with two arguments.

@node aset
@unnumberedsubsubsec @code{aset} (73)
@vindex aset
Call @code{aset} with three arguments.

@node nthcdr
@unnumberedsubsubsec @code{nthcdr} (155)
@vindex nthcdr
Call @code{nthcdr} with two arguments.

Added in Emacs 19.34.

@node elt
@unnumberedsubsubsec @code{elt} (156)
@vindex elt
Call @code{elt} with two arguments.

Added in Emacs 19.34.

@node nreverse
@unnumberedsubsubsec @code{nreverse} (159)
@vindex nreverse
Call @code{nreverse} with one argument.

Added in Emacs 19.34.

@node setcar
@unnumberedsubsubsec @code{setcar} (160)
@vindex setcar
Call @code{setcar} with two arguments.

Added in Emacs 19.34.

@node setcdr
@unnumberedsubsubsec @code{setcdr} (161)
@vindex setcdr
Call @code{setcdr} with two arguments.

Added in Emacs 19.34.

@node car-safe
@unnumberedsubsubsec @code{car-safe} (162)
@vindex car-safe
Call @code{car-safe} with one argument.

Added in Emacs 19.34.

@node cdr-safe
@unnumberedsubsubsec @code{cdr-safe} (163)
@vindex cdr-safe
Call @code{cdr-safe} with one argument.

Added in Emacs 19.34.
@node nconc
@unnumberedsubsubsec @code{nconc} (164)
@vindex nconc
Call @code{nconc} with two arguments.

Added in Emacs 19.34.

@node Arithmetic Function Instructions
@subsection Arithmetic Function Instructions

These instructions correspond to general functions which are not
specific to Emacs; common cases are usually inlined for speed by the
bytecode interpreter.

@menu
* sub1::
* add1::
* eqlsign::
* gtr::
* lss::
* leq::
* geq::
* diff::
* negate::
* plus::
* mult::
* max::
* min::
* quo::
* rem::
@end menu

@node sub1
@unnumberedsubsubsec @code{sub1} (83)
@vindex sub1
Call @code{1-} with one argument, subtracting one from the top-of-stack value.

@node add1
@unnumberedsubsubsec @code{add1} (84)
@vindex add1
Call @code{1+} with one argument, adding one to the top-of-stack value.

@node eqlsign
@unnumberedsubsubsec @code{eqlsign} (85)
@vindex eqlsign
Call @code{=} with two arguments, comparing the two values at the top of the stack for numerical or strict equality.

@node gtr
@unnumberedsubsubsec @code{gtr} (86)
@vindex gtr
Call @code{>} with two arguments, comparing the two values at the top of the stack with the numerical greater-than relation.

@node lss
@unnumberedsubsubsec @code{lss} (87)
@vindex lss
Call @code{<} with two arguments, comparing the two values at the top of the stack with the numerical less-than relation.

@node leq
@unnumberedsubsubsec @code{leq} (88)
@vindex leq
Call @code{<=} with two arguments, comparing the two values at the top of the stack with the numerical less-than-or-equals relation.

@node geq
@unnumberedsubsubsec @code{geq} (89)
@vindex geq
Call @code{>=} with two arguments, comparing the two values at the top of the stack with the numerical less-than-or-equals relation.

@node diff
@unnumberedsubsubsec @code{diff} (90)
@vindex diff
Call @code{-} with two arguments, subtracting the two values at the top of the stack.

@node negate
@unnumberedsubsubsec @code{negate} (91)
@vindex negate
Call @code{-} with one argument, negating the top-of-stack value.

@node plus
@unnumberedsubsubsec @code{plus} (92)
@vindex plus
Call @code{+} with two arguments, adding the two values at the top of the stack.

@node mult
@unnumberedsubsubsec @code{mult} (95)
@vindex mult
Call @code{*} with two arguments, multiplying the two values at the
top of the stack.

Since emacs 19.34

@node max
@unnumberedsubsubsec @code{max} (93)
@vindex max
Call @code{max} with two arguments.

@node min
@unnumberedsubsubsec @code{min} (94)
@vindex min
Call @code{min} with two arguments.

@node quo
@unnumberedsubsubsec @code{quo} (165)
@vindex quo
Call @code{/} with two arguments, dividing the two values at the top of the stack.

@node rem
@unnumberedsubsubsec @code{rem} (166)
@vindex rem
Call @code{%} with two arguments, calculating the modulus of the two values at the top of the stack.

Added in Emacs 19.34.

@node String Function Instructions
@subsection String Function Instructions

These instructions correspond to general functions which are not
specific to Emacs; the bytecode interpreter calls the corresponding C
function for them.

@menu
* substring::
* concat2::
* concat3::
* concat4::
* concatN::
* upcase::
* downcase::
* stringeqlsign::
* stringlss::
@end menu

@node substring
@unnumberedsubsubsec @code{substring} (79)
@vindex substring
Call @code{substring} with three arguments.

@node concat2
@unnumberedsubsubsec @code{concat2} (80)
@vindex concat2
Call @code{concat} with two arguments.

@node concat3
@unnumberedsubsubsec @code{concat3} (81)
@vindex concat3
Call @code{concat} with three arguments.

@node concat4
@unnumberedsubsubsec @code{concat4} (82)
@vindex concat4
Call @code{concat} with four arguments.


@node concatN
@unnumberedsubsubsec @code{concatN} (174)
@vindex concatN

Call @code{concat} an arbitrary number of arguments.  Note there are
Note special instructions for the case where tehre are 2 to 4 items to
concatenate.

Added in Emacs 19.34.

@node upcase
@unnumberedsubsubsec @code{upcase} (150)
@vindex upcase
Call @code{upcase} with one argument.

Added in Emacs 19.34.

@node downcase
@unnumberedsubsubsec @code{downcase} (151)
@vindex downcase
Call @code{downcase} with one argument.

Added in Emacs 19.34.

@node stringeqlsign
@unnumberedsubsubsec @code{stringeqlsign} (152)
@vindex stringeqlsign
Call @code{string=} with two arguments, comparing two strings for equality.

Added in Emacs 19.34.

@node stringlss
@unnumberedsubsubsec @code{stringlss} (153)
@vindex stringlss
Call @code{string<} with two arguments, comparing two strings.

Added in Emacs 19.34.

@node Emacs Function Instructions
@subsection Emacs Function Instructions

These instructions correspond to Emacs-specific text manipulation
functions. They are generally not inlined by the bytecode interpreter,
but simply call the corresponding C function.

@menu
* point::
* goto-char::
* insert::
* insertN::
* point-min::
* point-max::
* char-after::
* following-char::
* preceding-char::
* current-column::
* eolp::
* eobp::
* bolp::
* bobp::
* current-buffer::
* set-buffer::
* save-current-buffer-1::
* forward-char::
* forward-word::
* skip-chars-forward::
* skip-chars-backward::
* forward-line::
* char-syntax::
* buffer-substring::
* delete-region::
* narrow-to-region::
* widen::
* end-of-line::
* set-marker::
* match-beginning::
* match-end::
@end menu

@node point
@unnumberedsubsubsec @code{point} (96)
@vindex point
Call @code{point} with no arguments.

@node goto-char
@unnumberedsubsubsec @code{goto-char} (98)
@vindex goto-char
Call @code{goto-char} with one argument.

@node insert
@unnumberedsubsubsec @code{insert} (99)
@vindex insert
Call @code{insert} with one argument.

@node insertN
@unnumberedsubsubsec @code{insert} (99)
@vindex insertN
Call @code{insert} with an abitrary number of arguments.

Note there are special instructions when there is only one argument.

Added in Emacs 19.34.

@node point-min
@unnumberedsubsubsec @code{point-min} (101)
@vindex point-min
Call @code{point-min} with no arguments.

@node point-max
@unnumberedsubsubsec @code{point-max} (100)
@vindex point-max
Call @code{point-max} with no arguments.

@node char-after
@unnumberedsubsubsec @code{char-after} (102)
@vindex char-after
Call @code{char-after} with one argument.

@node following-char
@unnumberedsubsubsec @code{following-char} (103)
@vindex following-char
Call @code{following-char} with no arguments.

@node preceding-char
@unnumberedsubsubsec @code{preceding-char} (104)
@vindex preceding-char
Call @code{preceding-char} with no arguments.

@node current-column
@unnumberedsubsubsec @code{current-column} (105)
@vindex current-column
Call @code{current-column} with no arguments.

@node eolp
@unnumberedsubsubsec @code{eolp} (108)
@vindex eolp
Call @code{eolp} with no arguments.

@node eobp
@unnumberedsubsubsec @code{eobp} (109)
@vindex eobp
Call @code{eobp} with no arguments.

@node bolp
@unnumberedsubsubsec @code{bolp} (110)
@vindex bolp
Call @code{bolp} with no arguments.

@node bobp
@unnumberedsubsubsec @code{bobp} (111)
@vindex bobp
Call @code{bobp} with no arguments.

@node current-buffer
@unnumberedsubsubsec @code{current-buffer} (112)
@vindex current-buffer
Call @code{current-buffer} with no arguments.

@node set-buffer
@unnumberedsubsubsec @code{set-buffer} (113)
@vindex set-buffer
Call @code{set-buffer} with one argument.

@node save-current-buffer-1
@unnumberedsubsubsec @code{save-current-buffer-1} (114)
@vindex save-current-buffer
Call @code{save-current-buffer} with one stack argument,
the body to be evaluated.

Replaces older @code{save-current-buffer}.

Added in Emacs 19.34.

@strong{Example}
@code{(defun save-current-buffer-eg() (save-current-buffer (prog 5)))} generates:
@verbatim
PC  Byte  Instruction
 0  114   save-current-buffer
 1  192   constant[0] prog
 2  193   constant[1] 5
 3   33   call[1]
 4   41   unbind[1]
 5  135   return

Constants Vector: [prog 5]
@end verbatim

@node forward-char
@unnumberedsubsubsec @code{forward-char} (117)
@vindex forward-char
Call @code{forward-char} with one argument.

Added in Emacs 19.34.

@node forward-word
@unnumberedsubsubsec @code{forward-word} (118)
@vindex forward-word
Call @code{forward-word} with one argument.

Added in Emacs 19.34.

@node skip-chars-forward
@unnumberedsubsubsec @code{skip-chars-forward} (119)
@vindex skip-chars-forward
Call @code{skip-chars-forward} with two arguments.

Added in Emacs 19.34.

@node skip-chars-backward
@unnumberedsubsubsec @code{skip-chars-backward} (120)
@vindex skip-chars-backward
Call @code{skip-chars-backward} with two arguments.

Added in Emacs 19.34.

@node forward-line
@unnumberedsubsubsec @code{forward-line} (121)
@vindex forward-line
Call @code{forward-line} with one argument.

Added in Emacs 19.34.

@node char-syntax
@unnumberedsubsubsec @code{char-syntax} (122)
@vindex char-syntax
Call @code{char-syntax} with one argument.

Added in Emacs 19.34.

@node buffer-substring
@unnumberedsubsubsec @code{buffer-substring} (123)
@vindex buffer-substring
Call @code{buffer-substring} with two arguments.

Added in Emacs 19.34.

@node delete-region
@unnumberedsubsubsec @code{delete-region} (124)
@vindex delete-region
Call @code{delete-region} with two arguments.

Added in Emacs 19.34.

@node narrow-to-region
@unnumberedsubsubsec @code{narrow-to-region} (125)
@vindex narrow-to-region
Call @code{narrow-to-region} with two arguments.

Added in Emacs 19.34.

@node widen
@unnumberedsubsubsec @code{widen} (126)
@vindex widen
Call @code{widen} with no arguments.

Added in Emacs 19.34.

@node end-of-line
@unnumberedsubsubsec @code{end-of-line} (127)
@vindex end-of-line
Call @code{end-of-line} with one argument.

Added in Emacs 19.34.

@node set-marker
@unnumberedsubsubsec @code{set-marker} (147)
@vindex set-marker
Call @code{set-marker} with three arguments.

Added in Emacs 19.34.

@node match-beginning
@unnumberedsubsubsec @code{match-beginning} (148)
@vindex match-beginning
Call @code{match-beginning} with one argument.

Added in Emacs 19.34.

@node match-end
@unnumberedsubsubsec @code{match-end} (149)
@vindex match-end
Call @code{match-end} with one argument.

Added in Emacs 19.34.

@node Stack Manipulation Instructions
@section Stack Manipulation Instructions

@menu
* discard::
* dup::
@end menu

@node discard
@unnumberedsubsec @code{discard} (136)
@vindex discard
Discard one value.

@node dup
@unnumberedsubsec @code{dup} (137)
@vindex dup
Make a copy of the top-of-stack value and push that onto the top of the evaluation stack.

@subsubsection Example
When lexical binding is in effect, @code{(defun dup-eg(n) n)} generates:
@verbatim
PC  Byte  Instruction
 0  137   dup  ;; duplicates top of stack: n
 1  135   return
@end verbatim

@node Binding Instructions
@section Binding Instructions

These instructions manipulate the special-bindings stack by creating a
new binding when executed.  They need to be balanced with
@code{unbind} instructions.

@unnumberedsubsec @code{save-excursion} (138)
@vindex save-excursion
Make a binding recording buffer, point, and mark.

@node Opcode Changes Between Emacs Releases

@chapter Opcode Changes Between Emacs Releases

@menu
* After 17 and Starting in 18.59::
* After 18.59 and Starting in 19.34::
* After 19.34 and Starting in 20.1::
* After 20.1 and Starting in 21.4::
* After 21.1 and Starting in 22.1::
* After 22.1 and Starting in 23.1::
* After 23.1 and Starting in 24.1::
@end menu

@node After 17 and Starting in 18.59
@section Between 17 and 18.59

The following became obsolete:
@itemize
@item @code{mark} (97)
@item @code{scan-buffer} (107)
@item @code{set-mark} (115)
@end itemize

@node After 18.59 and Starting in 19.34
@section After 18.59 and Starting 19.34

jwz and Hallvard made major changes and additions to the bytecode
interpreter.

The following were added:
@itemize
@item @code{mult} (97)
@item @code{forward-char} (117)
@item @code{forward-word} (118)
@item @code{skip-chars-forward} (119)
@item @code{skip-chars-backward} (120)
@item @code{forward-line} (121)
@item @code{char-syntax} (122)
@item @code{buffer-substring} (123)
@item @code{delete-region} (124)
@item @code{narrow-to-region} (125)
@item @code{widen} (126)
@item @code{end-of-line} (127)
@item @code{unbind-all} (146)
@item @code{set-marker} (147)
@item @code{match-beginning} (148)
@item @code{match-end} (149)
@item @code{upcase} (150)
@item @code{downcase} (151)
@item @code{stringeqlsign} (152)
@item @code{stringlss} (153)
@item @code{equal} (154)
@item @code{nthcdr} (155)
@item @code{elt} (156)
@item @code{member} (157)
@item @code{assq} (158)
@item @code{nreverse} (159)
@item @code{setcar} (160)
@item @code{setcdr} (161)
@item @code{car-safe} (162)
@item @code{cdr-safe} (163
@item @code{nconc} (164)
@item @code{quo} (165)
@item @code{rem} (166)
@item @code{numberp} (167)
@item @code{integerp} (162)
@item @code{Rgoto} (170)
@item @code{Rgotoifnil} (171)
@item @code{Rgotoifnonnil} (172)
@item @code{Rgotoifnilelsepop} (173)
@item @code{Rgotoifnonnilelsepop} (174)
@item @code{listN} (175)
@item @code{concatN} (176)
@item @code{insertN} (177)
@end itemize

Instruction @code{unbind-all} was added to support tail-recursion
removal.  However this was never subsequently implemented so this
intruction was never generated.

Starting in this version, unless C prepocessor variable
@code{BYTE_CODE_SAFE} (on by default) is defined, the obsolete
instructions listed in 18.59 are not implemented.

@node After 19.34 and Starting in 20.1
@section After 19.34 and Starting in 20.1

Thre were no instruction changes. However bytecode interpretation of
@code{read-char}, which became obsolete in v19 was dropped.

@node After 20.1 and Starting in 21.4
@section Ater 20.1 and Starting in 21.4

Thre were no instruction changes. However there were major
changes in the bytecode interpreter.

An instruction with opcode 0 causes an abort.

@node After 21.1 and Starting in 22.1
@section After 21.1 and Starting in 22.1

Thre were no instruction changes.

@node After 22.1 and Starting in 23.1
@section After 22.1 and Starting in 23.1

There were no instruction changes.

@node After 23.1 and Starting in 24.1
@section After 23.1 and Starting in 24.1

The following became obsolete:

@unnumberedsubsec @code{save-current-buffer} (97)

Is replaced by @code{save-current-buffer-1} (114)

Unless C prepocessor variable @code{BYTE_CODE_SAFE} (on by default) is
defined, obsolete instructions below and from earlier versions are not implemented.

@itemize
@item @code{temp-output-buffer-setup} (144)
@item @code{temp-output-buffer-show} (145)
@item @code{save-window-excursion} (139)
@end itemize

Instruction @code{unbind-all}, which never was generated, was marked obsolete
in this version.

@node Opcode Table
@chapter Opcode Table

In the table below, a @code{*} by the decimal number indicates an
obsolete instruction. Stack effects are given as the number of
stack entries popped followed by the number of entries pushed. For
example, for a @code{cons} instruction, two stack entries are popped and
one is pushed. This is denoted: @math{-2+1}.

@multitable @columnfractions .09 .09 .31 .55 .18
@headitem
@verb{| |}Oct
@tab @verb{| |}Dec
@tab @verb{| |} Instruction
@tab Description
@tab Stack

@item @verb{|  00|}
@tab @verb{|   0|}
@tab @tab Immediate program abort! Was @code{stack-ref[0]} but @code{dup} should be used instead.

@item @verb{|  01|}
@tab @verb{|   1|}
@tab @verb{|  stack-ref[1]|}
@tab stack reference 1
@tab @math{+1}
@item @verb{|  02|}
@tab @verb{|   2|}
@tab @verb{|  stack-ref[2]|}
@tab stack reference 2
@tab @math{+1}
@item @verb{|  03|}
@tab @verb{|   3|}
@tab @verb{|  stack-ref[3]|}
@tab stack reference 3
@tab @math{+1}
@item @verb{|  04|}
@tab @verb{|   4|}
@tab @verb{|  stack-ref[4]|}
@tab stack reference 4
@tab @math{+1}
@item @verb{|  05|}
@tab @verb{|   5|}
@tab @verb{|  stack-ref[5]|}
@tab stack reference 5
@tab @math{+1}
@item @verb{|  06|}
@tab @verb{|   6|}
@tab @verb{|  stack-ref[6]|}
@tab stack reference 0--255
@tab @math{+1}
@item @verb{|  07|}
@tab @verb{|   7|}
@tab @verb{|  stack-ref[7]|}
@tab stack reference 0--65535
@tab @math{+1}

@item @verb{| 010|}
@tab @verb{|   8|}
@tab @verb{|  varref[0]|}
@tab variable reference 0
@tab @math{+1}
@item @verb{| 011|}
@tab @verb{|   9|}
@tab @verb{|  varref[1]|}
@tab variable reference 1
@tab @math{+1}
@item @verb{| 012|}
@tab @verb{|  10|}
@tab @verb{|  varref[2]|}
@tab variable reference 2
@tab @math{+1}
@item @verb{| 013|}
@tab @verb{|  11|}
@tab @verb{|  varref[3]|}
@tab variable reference 3
@tab @math{+1}
@item @verb{| 014|}
@tab @verb{|  12|}
@tab @verb{|  varref[4]|}
@tab variable reference 4
@tab @math{+1}
@item @verb{| 015|}
@tab @verb{|  13|}
@tab @verb{|  varref[5]|}
@tab variable reference 5
@tab @math{+1}
@item @verb{| 016|}
@tab @verb{|  14|}
@tab @verb{|  varref[6]|}
@tab variable reference 0--255
@tab @math{+1}
@item @verb{| 017|}
@tab @verb{|  15|}
@tab @verb{|  varref[7]|}
@tab variable reference 0--65535
@tab @math{+1}

@item @verb{| 020|}
@tab @verb{|  16|}
@tab @verb{|  varset[0]|}
@tab Sets variable 0
@tab @math{-1}
@item @verb{| 021|}
@tab @verb{|  17|}
@tab @verb{|  varset[1]|}
@tab Sets variable 1
@tab @math{-1}
@item @verb{| 022|}
@tab @verb{|  18|}
@tab @verb{|  varset[2]|}
@tab Sets variable 2
@tab @math{-1}
@item @verb{| 023|}
@tab @verb{|  19|}
@tab @verb{|  varset[3]|}
@tab Sets variable 3
@tab @math{-1}
@item @verb{| 024|}
@tab @verb{|  20|}
@tab @verb{|  varset[4]|}
@tab Sets variable 4
@tab @math{-1}
@item @verb{| 025|}
@tab @verb{|  21|}
@tab @verb{|  varset[5]|}
@tab Sets variable 5
@tab @math{-1}
@item @verb{| 026|}
@tab @verb{|  22|}
@tab @verb{|  varset[6]|}
@tab Sets variable 6
@tab @math{-1}
@item @verb{| 027|}
@tab @verb{|  23|}
@tab @verb{|  varset[7]|}
@tab Sets variable 7
@tab @math{-1}

@item @verb{| 030|}
@tab @verb{|  24|}
@tab @verb{|  varbind[0]|}
@tab Bind variable 0
@tab @math{-1}
@item @verb{| 031|}
@tab @verb{|  25|}
@tab @verb{|  varbind[1]|}
@tab Bind variable 1
@tab @math{-1}
@item @verb{| 032|}
@tab @verb{|  26|}
@tab @verb{|  varbind[2]|}
@tab Bind variable 2
@tab @math{-1}
@item @verb{| 033|}
@tab @verb{|  27|}
@tab @verb{|  varbind[3]|}
@tab Bind variable 3
@tab @math{-1}
@item @verb{| 034|}
@tab @verb{|  28|}
@tab @verb{|  varbind[4]|}
@tab Bind variable 4
@tab @math{-1}
@item @verb{| 035|}
@tab @verb{|  29|}
@tab @verb{|  varbind[5]|}
@tab Bind variable 5
@tab @math{-1}
@item @verb{| 036|}
@tab @verb{|  30|}
@tab @verb{|  varbind[6]|}
@tab Bind variable 6
@tab @math{-1}
@item @verb{| 037|}
@tab @verb{|  31|}
@tab @verb{|  varbind[7]|}
@tab Bind variable 7
@tab @math{-1}

@item @verb{| 040|}
@tab @verb{|  32|}
@tab @verb{|  call[0]|}
@tab Calls a function
@tab @math{-1+1}
@item @verb{| 041|}
@tab @verb{|  33|}
@tab @verb{|  call[1]|}
@tab Calls a function
@tab @math{-2+1}
@item @verb{| 042|}
@tab @verb{|  34|}
@tab @verb{|  call[2]|}
@tab Calls a function
@tab @math{-3+1}
@item @verb{| 043|}
@tab @verb{|  35|}
@tab @verb{|  call[3]|}
@tab Calls a function
@tab @math{-4+1}
@item @verb{| 044|}
@tab @verb{|  36|}
@tab @verb{|  call[4]|}
@tab Calls a function
@tab @math{-5+1}
@item @verb{| 045|}
@tab @verb{|  37|}
@tab @verb{|  call[5]|}
@tab Calls a function
@tab @math{-6+1}
@item @verb{| 046|}
@tab @verb{|  38|}
@tab @verb{|  call[6]|}
@tab Calls a function
@tab @math{-n-1+1}
@item @verb{| 047|}
@tab @verb{|  39|}
@tab @verb{|  call[7]|}
@tab Calls a function
@tab @math{-n-1+1}

@item @verb{| 050|}
@tab @verb{|  40|}
@tab @verb{|  unbind0|}
@tab Unbinds special bindings
@tab @math{-0}
@item @verb{| 051|}
@tab @verb{|  41|}
@tab @verb{|  unbind1|}
@tab Unbinds special bindings
@tab @math{-0}
@item @verb{| 052|}
@tab @verb{|  42|}
@tab @verb{|  unbind2|}
@tab Unbinds special bindings
@tab @math{-0}
@item @verb{| 053|}
@tab @verb{|  43|}
@tab @verb{|  unbind3|}
@tab Unbinds special bindings
@tab @math{-0}
@item @verb{| 054|}
@tab @verb{|  44|}
@tab @verb{|  unbind4|}
@tab Unbinds special bindings
@tab @math{-0}
@item @verb{| 055|}
@tab @verb{|  45|}
@tab @verb{|  unbind5|}
@tab Unbinds special bindings
@tab @math{-0}
@item @verb{| 056|}
@tab @verb{|  46|}
@tab @verb{|  unbind6|}
@tab Unbinds special bindings
@tab @math{-0}
@item @verb{| 057|}
@tab @verb{|  47|}
@tab @verb{|  unbind7|}
@tab Unbinds special bindings
@tab @math{-0}

@item @verb{| 063|}
@tab @verb{|  51|}
@tab @tab Unused
@item @verb{| 064|}
@tab @verb{|  52|}
@tab @tab Unused
@item @verb{| 065|}
@tab @verb{|  53|}
@tab @tab Unused
@item @verb{| 066|}
@tab @verb{|  54|}
@tab @tab Unused
@item @verb{| 067|}
@tab @verb{|  55|}
@tab @tab Unused

@item @verb{| 070|}
@tab @verb{|  56|}
@tab @verb{|  nth|}
@tab Call @code{nth} with two arguments.
@tab @math{-2+1}
@item @verb{| 071|}
@tab @verb{|  57|}
@tab @verb{|  symbolp|}
@tab Call @code{symbolp} with one argument.
@tab @math{-1+1}
@item @verb{| 072|}
@tab @verb{|  58|}
@tab @verb{|  consp|}
@tab Call @code{consp} with one argument.
@tab @math{-1+1}
@item @verb{| 073|}
@tab @verb{|  59|}
@tab @verb{|  stringp|}
@tab Call @code{stringp} with one argument.
@tab @math{-1+1}
@item @verb{| 074|}
@tab @verb{|  60|}
@tab @verb{|  listp|}
@tab Call @code{listp} with one argument.
@tab @math{-1+1}
@item @verb{| 075|}
@tab @verb{|  61|}
@tab @verb{|  eq|}
@tab Call @code{eq} with two arguments.
@tab @math{-2+1}
@item @verb{| 076|}
@tab @verb{|  62|}
@tab @verb{|  memq|}
@tab Call @code{memq} with two arguments.
@tab @math{-2+1}
@item @verb{| 077|}
@tab @verb{|  63|}
@tab @verb{|  not|}
@tab Call @code{not} with one argument.
@tab @math{-1+1}

@item @verb{|0100|}
@tab @verb{|  64|}
@tab @verb{|  car|}
@tab Call @code{car} with one argument.
@tab @math{-1+1}
@item @verb{|0101|}
@tab @verb{|  65|}
@tab @verb{|  cdr|}
@tab Call @code{cdr} with one argument.
@tab @math{-1+1}
@item @verb{|0102|}
@tab @verb{|  66|}
@tab @verb{|  cons|}
@tab Call @code{cons} with two arguments.
@tab @math{-2+1}
@item @verb{|0103|}
@tab @verb{|  67|}
@tab @verb{|  list1|}
@tab Call @code{list} with one argument.
@tab @math{-1+1}
@item @verb{|0104|}
@tab @verb{|  68|}
@tab @verb{|  list2|}
@tab Call @code{list} with two arguments.
@tab @math{-2+1}
@item @verb{|0105|}
@tab @verb{|  69|}
@tab @verb{|  list3|}
@tab Call @code{list} with three arguments.
@tab @math{-3+1}
@item @verb{|0106|}
@tab @verb{|  70|}
@tab @verb{|  list4|}
@tab Call @code{list} with four arguments.
@tab @math{-4+1}
@item @verb{|0107|}
@tab @verb{|  71|}
@tab @verb{|  length|}
@tab Call @code{length} with one argument.
@tab @math{-1+1}
@item @verb{|0110|}
@tab @verb{|  72|}
@tab @verb{|  aref|}
@tab Call @code{aref} with two arguments.
@tab @math{-2+1}
@item @verb{|0111|}
@tab @verb{|  73|}
@tab @verb{|  aset|}
@tab Call @code{aset} with three arguments.
@tab @math{-3+1}
@item @verb{|0112|}
@tab @verb{|  74|}
@tab @verb{|  symbol-value|}
@tab Call @code{symbol-value} with one argument.
@tab @math{-1+1}
@item @verb{|0113|}
@tab @verb{|  75|}
@tab @verb{|  symbol-function|}
@tab Call @code{symbol-function} with one argument.
@tab @math{-1+1}
@item @verb{|0114|}
@tab @verb{|  76|}
@tab @verb{|  set|}
@tab Call @code{set} with two arguments.
@tab @math{-2+1}
@item @verb{|0115|}
@tab @verb{|  77|}
@tab @verb{|  fset|}
@tab Call @code{fset} with two arguments.
@tab @math{-2+1}
@item @verb{|0116|}
@tab @verb{|  78|}
@tab @verb{|  get|}
@tab Call @code{get} with two arguments.
@tab @math{-2+1}
@item @verb{|0117|}
@tab @verb{|  79|}
@tab @verb{|  substring|}
@tab Call @code{substring} with three arguments.
@tab @math{-3+1}
@item @verb{|0120|}
@tab @verb{|  80|}
@tab @verb{|  concat2|}
@tab Call @code{concat} with two arguments.
@tab @math{-2+1}
@item @verb{|0121|}
@tab @verb{|  81|}
@tab @verb{|  concat3|}
@tab Call @code{concat} with three arguments.
@tab @math{-3+1}
@item @verb{|0122|}
@tab @verb{|  82|}
@tab @verb{|  concat4|}
@tab Call @code{concat} with four arguments.
@tab @math{-4+1}

@item @verb{|0123|}
@tab @verb{|  83|}
@tab @verb{|  sub1|}
@tab Call @code{1-} with one argument, subtracting one from the top-of-stack value.
@tab @math{-1+1}
@item @verb{|0124|}
@tab @verb{|  84|}
@tab @verb{|  add1|}
@tab Call @code{1+} with one argument, adding one to the top-of-stack value.
@tab @math{-1+1}
@item @verb{|0125|}
@tab @verb{|  85|}
@tab @verb{|  eqlsign|}
@tab Call @code{=} with two arguments, comparing the two values at the top of the stack for numerical or strict equality.
@tab @math{-2+1}
@item @verb{|0126|}
@tab @verb{|  86|}
@tab @verb{|  gtr|}
@tab Call @code{>} with two arguments, comparing the two values at the top of the stack with the numerical greater-than relation.
@tab @math{-2+1}
@item @verb{|0127|}
@tab @verb{|  87|}
@tab @verb{|  lss|}
@tab Call @code{<} with two arguments, comparing the two values at the top of the stack with the numerical less-than relation.
@tab @math{-2+1}
@item @verb{|0130|}
@tab @verb{|  88|}
@tab @verb{|  leq|}
@tab Call @code{<=} with two arguments, comparing the two values at the top of the stack with the numerical less-than-or-equals relation.
@tab @math{-2+1}
@item @verb{|0131|}
@tab @verb{|  89|}
@tab @verb{|  geq|}
@tab Call @code{>=} with two arguments, comparing the two values at the top of the stack with the numerical less-than-or-equals relation.
@tab @math{-2+1}
@item @verb{|0132|}
@tab @verb{|  90|}
@tab @verb{|  diff|}
@tab Call @code{-} with two arguments, subtracting the two values at the top of the stack.
@tab @math{-2+1}
@item @verb{|0133|}
@tab @verb{|  91|}
@tab @verb{|  negate|}
@tab Call @code{-} with one argument, negating the top-of-stack value.
@tab @math{-1+1}
@item @verb{|0134|}
@tab @verb{|  92|}
@tab @verb{|  plus|}
@tab Call @code{+} with two arguments, adding the two values at the top of the stack.
@tab @math{-2+1}
@item @verb{|0137|}
@tab @verb{|  95|}
@tab @verb{|  mult|}
@tab Call @code{*} with two arguments, multiplying the two values at the top of the stack.
@tab @math{-2+1}
@item @verb{|0135|}
@tab @verb{|  93|}
@tab @verb{|  max|}
@tab Call @code{max} with two arguments.
@tab @math{-2+1}
@item @verb{|0136|}
@tab @verb{|  94|}
@tab @verb{|  min|}
@tab Call @code{min} with two arguments.

@tab @math{-2+1}
@item @verb{|0140|}
@tab @verb{|  96|}
@tab @verb{|  point|}
@tab Call @code{point} with no arguments.
@item @verb{|0141|}
@tab @verb{| *97|}
@tab @verb{|  save-current-buffer|}
@tab Obsolete in 24.1?
@tab @math{-0+1}
@item @verb{|0141|}
@tab @verb{| *97|}
@tab @verb{|  bmark|}
@tab used in v17
@tab @math{-0+1}
@item @verb{|0141|}
@tab @verb{| *97|}
@tab @verb{|  mult|}
@tab From v19 to ??
@tab @math{-0+1}
@item @verb{|0141|}
@tab @verb{| *97|}
@tab @verb{|  bmark|}
@tab used in v17
@tab @math{-0+1}
@item @verb{|0142|}
@tab @verb{|  98|}
@tab @verb{|  goto-char|}
@tab Call @code{goto-char} with one argument.
@tab @math{-1+1}
@item @verb{|0143|}
@tab @verb{|  99|}
@tab @verb{|  insert|}
@tab Call @code{insert} with one argument.
@tab @math{-1+1}
@item @verb{|0145|}
@tab @verb{| 100|}
@tab @verb{|  point-max|}
@tab Call @code{point-max} with no arguments.
@tab @math{-0+1}
@item @verb{|0146|}
@tab @verb{| 101|}
@tab @verb{|  point-min|}
@tab Call @code{point-min} with no arguments.
@tab @math{-0+1}
@item @verb{|0144|}
@tab @verb{| 102|}
@tab @verb{|  char-after|}
@tab Call @code{char-after} with one argument.
@tab @math{-1+1}
@item @verb{|0147|}
@tab @verb{| 103|}
@tab @verb{|  following-char|}
@tab Call @code{following-char} with no arguments.
@tab @math{-0+1}
@item @verb{|0150|}
@tab @verb{| 104|}
@tab @verb{|  preceding-char|}
@tab Call @code{preceding-char} with no arguments.
@tab @math{-0+1}
@item @verb{|0151|}
@tab @verb{| 105|}
@tab @verb{|  current-column|}
@tab Call @code{current-column} with no arguments.
@tab @math{-0+1}
@item @verb{|0154|}
@tab @verb{| 108|}
@tab @verb{|  eolp|}
@tab Call @code{eolp} with no arguments.
@tab @math{-0+1}
@item @verb{|0155|}
@tab @verb{| 109|}
@tab @verb{|  eobp|}
@tab Call @code{eobp} with no arguments.
@tab @math{-0+1}
@item @verb{|0156|}
@tab @verb{| 110|}
@tab @verb{|  bolp|}
@tab Call @code{bolp} with no arguments.
@tab @math{-0+1}
@item @verb{|0157|}
@tab @verb{| 111|}
@tab @verb{|  bobp|}
@tab Call @code{bobp} with no arguments.
@tab @math{-0+1}
@item @verb{|0160|}
@tab @verb{| 112|}
@tab @verb{|  current-buffer|}
@tab Call @code{current-buffer} with no arguments.
@tab @math{-0+1}
@item @verb{|0161|}
@tab @verb{| 113|}
@tab @verb{|  set-buffer|}
@item @verb{|0162|}
@tab @verb{| 114|}
@tab @verb{|save-current-buffer-1|}
@tab Call @code{save-current-buffer} with one argument.
@item @verb{|0162|}
@tab @verb{|*114|}
@tab @verb{|  read-char|}
@tab Obsolete starting with v19
@tab @math{+1}
@item @verb{|0163|}
@tab @verb{|*115|}
@tab @verb{|  set-mark|}
@tab Obsolete starting with v18
@tab @math{-0}
@item @verb{|0164|}
@tab @verb{|*116|}
@tab @verb{|  interactive-p|}
@tab Obsolete starting with v18
@tab @math{+1}
@item @verb{|0165|}
@tab @verb{| 117|}
@tab @verb{|  forward-char|}
@tab Call @code{forward-char}, one argument.
@tab @math{-1+1}
@item @verb{|0166|}
@tab @verb{| 118|}
@tab @verb{|  forward-word|}
@tab Call @code{forward-word}, one argument.
@tab @math{-1+1}
@item @verb{|0167|}
@tab @verb{| 119|}
@tab @verb{|  skip-chars-forward|}
@tab Call @code{skip-chars-forward}, two arguments.
@tab @math{-2+1}
@item @verb{|0170|}
@tab @verb{| 120|}
@tab @verb{|  skip-chars-backward|}
@tab Call @code{skip-chars-backward}, two arguments.
@tab @math{-2+1}
@item @verb{|0171|}
@tab @verb{| 121|}
@tab @verb{|  forward-line|}
@tab Call @code{forward-line}, one argument.
@tab @math{-1+1}
@item @verb{|0172|}
@tab @verb{| 122|}
@tab @verb{|  char-syntax|}
@tab Call @code{char-syntax}, one argument.
@tab @math{-1+1}
@item @verb{|0173|}
@tab @verb{| 123|}
@tab @verb{|  buffer-substring|}
@tab Call @code{buffer-substring}, two arguments.
@tab @math{-2+1}
@item @verb{|0174|}
@tab @verb{| 124|}
@tab @verb{|  delete-region|}
@tab Call @code{delete-region}, two arguments.
@tab @math{-2+1}
@item @verb{|0175|}
@tab @verb{| 125|}
@tab @verb{|  narrow-to-region|}
@tab Call @code{narrow-to-region}, two arguments.
@tab @math{-2+1}
@item @verb{|0176|}
@tab @verb{| 126|}
@tab @verb{|  widen|}
@tab Call @code{widen}, no arguments.
@tab @math{-0+1}
@item @verb{|0177|}
@tab @verb{| 127|}
@tab @verb{|  end-of-line|}
@tab Call @code{end-of-line}, one argument.
@tab @math{-1+1}
@item @verb{|0200|}
@tab @verb{| 128|}
@tab
@tab Unused

@item @verb{|0201|}
@tab @verb{| 129|}
@tab @verb{|  constant2|}
@tab Load a constant 0--65535 (but generally greater than 63)
@tab @math{+1}

@item @verb{|0210|}
@tab @verb{| 136|}
@tab @verb{|  discard|}
@tab Discard top stack value
@tab @math{-1}
@item @verb{|0211|}
@tab @verb{| 137|}
@tab @verb{|  dup|}
@tab Duplicate top stack value
@tab @math{+1}
@item @verb{|0212|}
@tab @verb{| 138|}
@tab @verb{|  save-excursion|}
@tab Make a binding recording buffer, point, and mark.
@tab @math{-0}

@item @verb{|0257|}
@tab @verb{| 175|}
@tab @verb{|  listN|}
@tab
@tab @math{-n+1}
@item @verb{|0260|}
@tab @verb{| 176|}
@tab @verb{|  concatN|}
@tab
@tab @math{-n+1}
@item @verb{|0261|}
@tab @verb{| 177|}
@tab @verb{|  insertN|}
@tab
@tab @math{-n+1}
@item @verb{|0262|}
@tab @verb{| 178|}
@tab @verb{|  stack-set|}
@item @verb{|0263|}
@tab @verb{| 179|}
@tab @verb{|  stack-set2|}

@item @verb{|0223|}
@tab @verb{| 147|}
@tab @verb{|  set-marker|}
@tab Call @code{set-marker}, three arguments.
@tab @math{-3+1}
@item @verb{|0224|}
@tab @verb{| 148|}
@tab @verb{|  match-beginning|}
@tab Call @code{match-beginning}, one argument.
@tab @math{-1+1}
@item @verb{|0225|}
@tab @verb{| 149|}
@tab @verb{|  match-end|}
@tab Call @code{match-end}, one argument.
@tab @math{-1+1}
@item @verb{|0226|}
@tab @verb{| 150|}
@tab @verb{|  upcase|}
@tab Call @code{upcase}, one argument.
@tab @math{-1+1}
@item @verb{|0227|}
@tab @verb{| 151|}
@tab @verb{|  downcase|}
@tab Call @code{downcase}, one argument.
@tab @math{-1+1}
@item @verb{|0230|}
@tab @verb{| 152|}
@tab @verb{|  stringeqlsign|}
@tab Call @code{string=}, two arguments, comparing two strings for equality.
@tab @math{-2+1}
@item @verb{|0231|}
@tab @verb{| 153|}
@tab @verb{|  stringlss|}
@tab Call @code{string<}, two arguments, comparing two strings.
@tab @math{-2+1}
@item @verb{|0232|}
@tab @verb{| 154|}
@tab @verb{|  equal|}
@tab Call @code{equal}, two arguments.
@tab @math{-2+1}
@item @verb{|0233|}
@tab @verb{| 155|}
@tab @verb{|  nthcdr|}
@tab Call @code{nthcdr}, two arguments.
@tab @math{-2+1}
@item @verb{|0234|}
@tab @verb{| 156|}
@tab @verb{|  elt|}
@tab Call @code{elt}, two arguments.
@tab @math{-2+1}
@item @verb{|0235|}
@tab @verb{| 157|}
@tab @verb{|  member|}
@tab Call @code{member}, two arguments.
@tab @math{-2+1}
@item @verb{|0236|}
@tab @verb{| 158|}
@tab @verb{|  assq|}
@tab Call @code{assq}, two arguments.
@tab @math{-2+1}
@item @verb{|0237|}
@tab @verb{| 159|}
@tab @verb{|  nreverse|}
@tab Call @code{nreverse}, one argument.
@tab @math{-1+1}
@item @verb{|0240|}
@tab @verb{| 160|}
@tab @verb{|  setcar|}
@tab Call @code{setcar}, two arguments.
@tab @math{-2+1}
@item @verb{|0241|}
@tab @verb{| 161|}
@tab @verb{|  setcdr|}
@tab Call @code{setcdr}, two arguments.
@tab @math{-2+1}
@item @verb{|0242|}
@tab @verb{| 162|}
@tab @verb{|  car-safe|}
@tab Call @code{car-safe}, one argument.
@tab @math{-1+1}
@item @verb{|0243|}
@tab @verb{| 163|}
@tab @verb{|  cdr-safe|}
@tab Call @code{cdr-safe}, one argument.
@tab @math{-1+1}
@item @verb{|0244|}
@tab @verb{| 164|}
@tab @verb{|  nconc|}
@tab Call @code{nconc}, two arguments.
@tab @math{-2+1}
@item @verb{|0245|}
@tab @verb{| 165|}
@tab @verb{|  quo|}
@tab Call @code{/}, two arguments, dividing the two values at the top of the stack.
@tab @math{-2+1}
@item @verb{|0246|}
@tab @verb{| 166|}
@tab @verb{|  rem|}
@tab Call @code{%}, two arguments, calculating the modulus of the two values at the top of the stack.
@tab @math{-2+1}
@item @verb{|0247|}
@tab @verb{| 167|}
@tab @verb{|  numberp|}
@tab Call @code{numberp}, one argument.
@tab @math{-1+1}
@item @verb{|0250|}
@tab @verb{| 168|}
@tab @verb{|  integerp|}
@tab Call @code{integerp}, one argument.
@tab @math{-1+1}
@item @verb{|0251|}
@tab @verb{| 169|}
@tab

@item @verb{|0252|}
@tab @verb{| 170|}
@tab @verb{|  Rgoto|}
@tab
@item @verb{|0253|}
@tab @verb{| 171|}
@tab @verb{|  Rgotoifnil|}
@tab
@item @verb{|0252|}
@tab @verb{| 172|}
@tab @verb{|  Rgotoifnonnil|}
@tab
@item @verb{|0253|}
@tab @verb{| 173|}
@tab @verb{|  Rgotoifnilelsepop|}
@tab
@item @verb{|0254|}
@tab @verb{| 174|}
@tab @verb{|  Rgotoifnonnilelsepop|}
@tab @tab

@item @verb{|0255|}
@tab @verb{| 175|}
@tab @verb{|  listN|}
@tab
@item @verb{|0256|}
@tab @verb{| 176|}
@tab @verb{|  concatN|}
@tab
@item @verb{|0257|}
@tab @verb{| 177|}
@tab @verb{|  insertN|}
@tab @tab

@item @verb{|0270|}
@tab @verb{| 184|}
@tab
@tab Unused
@item @verb{|0271|}
@tab @verb{| 185|}
@tab
@tab Unused
@item @verb{|0272|}
@tab @verb{| 186|}
@tab
@tab Unused
@item @verb{|0273|}
@tab @verb{| 187|}
@tab
@tab Unused
@item @verb{|0274|}
@tab @verb{| 188|}
@tab
@tab Unused
@item @verb{|0275|}
@tab @verb{| 189|}
@tab
@tab Unused
@item @verb{|0276|}
@tab @verb{| 190|}
@tab
@tab Unused
@item @verb{|0277|}
@tab @verb{| 191|}
@tab
@tab Unused

@item @verb{|0300|}
@tab @verb{| 192|}
@tab @verb{|  constant-i0|}
@tab
@tab @math{+1}
@item @verb{|0301|}
@tab @verb{| 193|}
@tab @verb{|  constant-i1|}
@tab
@tab @math{+1}
@item @verb{|0302|}
@tab @verb{| 194|}
@tab @verb{|  constant-i2|}
@tab
@tab @math{+1}
@item @verb{|0303|}
@tab @verb{| 195|}
@tab @verb{|  constant-i3|}
@tab
@tab @math{+1}
@item @verb{|0304|}
@tab @verb{| 196|}
@tab @verb{|  constant-i4|}
@tab
@tab @math{+1}
@item @verb{|0305|}
@tab @verb{| 197|}
@tab @verb{|  constant-i5|}
@tab
@tab @math{+1}
@item @verb{|0306|}
@tab @verb{| 198|}
@tab @verb{|  constant-i6|}
@tab
@tab @math{+1}
@item @verb{|0307|}
@tab @verb{| 199|}
@tab @verb{|  constant-i7|}
@tab
@tab @math{+1}
@item @verb{|0310|}
@tab @verb{| 200|}
@tab @verb{|  constant-i8|}
@tab
@tab @math{+1}
@item @verb{|0311|}
@tab @verb{| 201|}
@tab @verb{|  constant-i9|}
@tab
@tab @math{+1}
@item @verb{|0312|}
@tab @verb{| 202|}
@tab @verb{|  constant-i10|}
@tab
@tab @math{+1}
@item @verb{|0313|}
@tab @verb{| 203|}
@tab @verb{|  constant-i11|}
@tab
@tab @math{+1}
@item @verb{|0314|}
@tab @verb{| 204|}
@tab @verb{|  constant-i12|}
@tab
@tab @math{+1}
@item @verb{|0315|}
@tab @verb{| 205|}
@tab @verb{|  constant-i13|}
@tab
@tab @math{+1}
@item @verb{|0316|}
@tab @verb{| 206|}
@tab @verb{|  constant-i14|}
@tab
@tab @math{+1}
@item @verb{|0317|}
@tab @verb{| 207|}
@tab @verb{|  constant-i15|}
@tab
@tab @math{+1}
@item @verb{|0320|}
@tab @verb{| 208|}
@tab @verb{|  constant-i16|}
@tab
@tab @math{+1}
@item @verb{|0321|}
@tab @verb{| 209|}
@tab @verb{|  constant-i17|}
@tab
@tab @math{+1}
@item @verb{|0322|}
@tab @verb{| 210|}
@tab @verb{|  constant-i18|}
@tab
@tab @math{+1}
@item @verb{|0323|}
@tab @verb{| 211|}
@tab @verb{|  constant-i19|}
@tab
@tab @math{+1}
@item @verb{|0324|}
@tab @verb{| 212|}
@tab @verb{|  constant-i20|}
@tab
@tab @math{+1}
@item @verb{|0325|}
@tab @verb{| 213|}
@tab @verb{|  constant-i21|}
@tab
@tab @math{+1}
@item @verb{|0326|}
@tab @verb{| 214|}
@tab @verb{|  constant-i22|}
@tab
@tab @math{+1}
@item @verb{|0327|}
@tab @verb{| 215|}
@tab @verb{|  constant-i23|}
@tab
@tab @math{+1}
@item @verb{|0330|}
@tab @verb{| 216|}
@tab @verb{|  constant-i24|}
@tab
@tab @math{+1}
@item @verb{|0331|}
@tab @verb{| 217|}
@tab @verb{|  constant-i25|}
@tab
@tab @math{+1}
@item @verb{|0332|}
@tab @verb{| 218|}
@tab @verb{|  constant-i26|}
@tab
@tab @math{+1}
@item @verb{|0333|}
@tab @verb{| 219|}
@tab @verb{|  constant-i27|}
@tab
@tab @math{+1}
@item @verb{|0334|}
@tab @verb{| 220|}
@tab @verb{|  constant-i28|}
@tab
@tab @math{+1}
@item @verb{|0335|}
@tab @verb{| 221|}
@tab @verb{|  constant-i29|}
@tab
@tab @math{+1}
@item @verb{|0336|}
@tab @verb{| 222|}
@tab @verb{|  constant-i30|}
@tab
@tab @math{+1}
@item @verb{|0337|}
@tab @verb{| 223|}
@tab @verb{|  constant-i31|}
@tab
@tab @math{+1}
@item @verb{|0340|}
@tab @verb{| 224|}
@tab @verb{|  constant-i32|}
@tab
@tab @math{+1}
@item @verb{|0341|}
@tab @verb{| 225|}
@tab @verb{|  constant-i33|}
@tab
@tab @math{+1}
@item @verb{|0342|}
@tab @verb{| 226|}
@tab @verb{|  constant-i34|}
@tab
@tab @math{+1}
@item @verb{|0343|}
@tab @verb{| 227|}
@tab @verb{|  constant-i35|}
@tab
@tab @math{+1}
@item @verb{|0344|}
@tab @verb{| 228|}
@tab @verb{|  constant-i36|}
@tab
@tab @math{+1}
@item @verb{|0345|}
@tab @verb{| 229|}
@tab @verb{|  constant-i37|}
@tab
@tab @math{+1}
@item @verb{|0346|}
@tab @verb{| 230|}
@tab @verb{|  constant-i38|}
@tab
@tab @math{+1}
@item @verb{|0347|}
@tab @verb{| 231|}
@tab @verb{|  constant-i39|}
@tab
@tab @math{+1}
@item @verb{|0350|}
@tab @verb{| 232|}
@tab @verb{|  constant-i40|}
@tab
@tab @math{+1}
@item @verb{|0351|}
@tab @verb{| 233|}
@tab @verb{|  constant-i41|}
@tab
@tab @math{+1}
@item @verb{|0352|}
@tab @verb{| 234|}
@tab @verb{|  constant-i42|}
@tab
@tab @math{+1}
@item @verb{|0353|}
@tab @verb{| 235|}
@tab @verb{|  constant-i43|}
@tab
@tab @math{+1}
@item @verb{|0354|}
@tab @verb{| 236|}
@tab @verb{|  constant-i44|}
@tab
@tab @math{+1}
@item @verb{|0355|}
@tab @verb{| 237|}
@tab @verb{|  constant-i45|}
@tab
@tab @math{+1}
@item @verb{|0356|}
@tab @verb{| 238|}
@tab @verb{|  constant-i46|}
@tab
@tab @math{+1}
@item @verb{|0357|}
@tab @verb{| 239|}
@tab @verb{|  constant-i47|}
@tab
@tab @math{+1}
@item @verb{|0360|}
@tab @verb{| 240|}
@tab @verb{|  constant-i48|}
@tab
@tab @math{+1}
@item @verb{|0361|}
@tab @verb{| 241|}
@tab @verb{|  constant-i49|}
@tab
@tab @math{+1}
@item @verb{|0362|}
@tab @verb{| 242|}
@tab @verb{|  constant-i50|}
@tab
@tab @math{+1}
@item @verb{|0363|}
@tab @verb{| 243|}
@tab @verb{|  constant-i51|}
@tab
@tab @math{+1}
@item @verb{|0364|}
@tab @verb{| 244|}
@tab @verb{|  constant-i52|}
@tab
@tab @math{+1}
@item @verb{|0365|}
@tab @verb{| 245|}
@tab @verb{|  constant-i53|}
@tab
@tab @math{+1}
@item @verb{|0366|}
@tab @verb{| 246|}
@tab @verb{|  constant-i54|}
@tab
@tab @math{+1}
@item @verb{|0367|}
@tab @verb{| 247|}
@tab @verb{|  constant-i55|}
@tab
@tab @math{+1}
@item @verb{|0370|}
@tab @verb{| 248|}
@tab @verb{|  constant-i56|}
@tab
@tab @math{+1}
@item @verb{|0371|}
@tab @verb{| 249|}
@tab @verb{|  constant-i57|}
@tab
@tab @math{+1}
@item @verb{|0372|}
@tab @verb{| 250|}
@tab @verb{|  constant-i58|}
@tab
@tab @math{+1}
@item @verb{|0373|}
@tab @verb{| 251|}
@tab @verb{|  constant-i59|}
@tab
@tab @math{+1}
@item @verb{|0374|}
@tab @verb{| 252|}
@tab @verb{|  constant-i60|}
@tab
@tab @math{+1}
@item @verb{|0375|}
@tab @verb{| 253|}
@tab @verb{|  constant-i61|}
@tab
@tab @math{+1}
@item @verb{|0376|}
@tab @verb{| 254|}
@tab @verb{|  constant-i62|}
@tab
@tab @math{+1}
@item @verb{|0377|}
@tab @verb{| 255|}
@tab @verb{|  constant-i63|}
@tab
@tab @math{+1}
@end multitable


@node References
@chapter References

@itemize
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/src/bytecode.c, Execution of byte code produced by bytecomp.el}
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/emacs-lisp/bytecomp.el, bytecomp.el --- compilation of Lisp code into byte code}
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/src/data.c, data.c --- Primitive operations on Lisp data types}
@item @uref{http://nullprogram.com/blog/2014/01/04/, Emacs Byte-code Internals}
@item @uref{https://www.emacswiki.org/emacs/ByteCodeEngineering, Emacs Wiki ByteCodeEngineering}
@item @uref{https://groups.google.com/forum/#!topic/gnu.emacs.sources/oMfZT_4Oxrc easm.el, Assembler for Emacs' bytecode interpreter}
@item @uref{https://github.com/rocky/elisp-decompile, Emacs Lisp Decompiler}
@end itemize

@node Opcode Index
@unnumbered Opcode Index
@printindex ky

@node Instruction Index
@unnumbered Instruction Index
@printindex vr

@bye
